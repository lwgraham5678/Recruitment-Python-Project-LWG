import matplotlib.pyplot as plt
import pandas
import numpy as np
import scipy as sp
#Exporting-------------------------------------------------------------------------------------------------------------------------------------------------

points = pandas.read_csv(r'C:\Users\lwgra\OneDrive\Documents\School\Fall 2022\UG research\networks and data science\totalmenXnum_bmsm.csv', index_col=0)

X = [int(i) for i in points.columns.to_list()]
Ys = [int(i) for i in points.index]

HMArraystart = points.to_numpy()

Xlabel = 'totalmen'
Ylabel = 'num_bmsm'

#plotting 3D-----------------------------------------------------------------------------------------------------------------------------------------------
'''
fig = plt.figure()
ax = fig.add_subplot(projection='3d')

for i in range(0, len(Ys)):
    Z = [int(j) for j in points.iloc[i]]
    Y = [Ys[i] for j in range(0, len(X))]
    ax.scatter(X, Y, Z, marker='o')

ax.set_xlabel(Xlabel)
ax.set_ylabel(Ylabel)
ax.set_zlabel('n')

plt.show()
'''
#plotting Heat---------------------------------------------------------------------------------------------------------------------------------------------
'''
HMArray = np.flip(HMArraystart,axis=0)

fig, ax = plt.subplots()
im = ax.imshow(HMArray)

Y = Ys[::-1]

ax.set_xticks(np.arange(len(X)), labels=X)
ax.set_yticks(np.arange(len(Y)), labels=Y)

ax.set_xlabel(Xlabel)
ax.set_ylabel(Ylabel)

plt.setp(ax.get_xticklabels(), rotation=90, ha="right",
         rotation_mode="anchor")

"""
for i in range(len(X)):
    for j in range(len(Ys)):
        text = ax.text(j, i, HMArray[i, j], ha="center", va="center", color="w")
"""
ax.set_title("Degree Correlation Heat Map")
fig.tight_layout()
plt.show()
'''
#plotting 2D-----------------------------------------------------------------------------------------------------------------------------------------------
#print(points)
'''
Xf =[]
Yf = []

for i in range(len(X)):
    for j in range(len(Ys)):
        ele = HMArraystart[j, i]
        if ele != 0:
            for k in range(0,ele):
                Xf.append(X[i])
                Yf.append(Ys[j])

#for i in range(len(Xf)):
#    print(Xf[i],Yf[i])

print(sp.stats.pearsonr(Xf,Yf))
plt.scatter(Xf,Yf)
plt.xlabel(Xlabel)
plt.ylabel(Ylabel)
plt.show()
'''
# Violin Plot-----------------------------------------------------------------------------------------------------------------------------------------------

Data = [(-0.003903523766607049, (-0.03161939537682214, 0.023818346369071687), [0.001097631426920855, 0.0013289420465707517, 0.0012694016502221453, 0.0011553347582462018, 0.0016739782960055415, 0.001613367905502737, 0.0013274847050675285, 0.0012143641936043486, 0.0011556685542586387, 0.0011537352177675222]), 
(0.014867362319485492, (-0.012857229229963841, 0.042569111965872805), [0.0013857091215809135, 0.0013230695212893915, 0.0015044833604140337, 0.0018674698795180724, 0.0015648510382184773, 0.0016865437899048308, 0.001445434834979523, 0.0017488843324086358, 0.0013260201313965404, 0.0013832922355205388]), 
(-0.02163095944666242, (-0.04932067993953629, 0.0060919861982821726), [0.000946857616285951, 0.0012415750266051792, 0.0021883132245091082, 0.002185340499675152, 0.0011239943208707999, 0.0017763041032624785, 0.002067702487150706, 0.001300620750812888, 0.0017146573641577485, 0.0016557270415705754]), 
(0.009141600810121338, (-0.018582400867381478, 0.03685155559453195), [0.0019118243438966457, 0.0014460897732531237, 0.0016229061612473192, 0.0012175324675324675, 0.0010432363509910744, 0.0015644011819920041, 0.0015063731170336038, 0.0013918691642985559, 0.0011010662957811775, 0.0018550724637681159]), 
(-0.0023287199401140725, (-0.03004607337303438, 0.02539221206019533), [0.0018605175621582003, 0.0012963589223311915, 0.0015773759224832404, 0.0018591549295774647, 0.0014667719733724473, 0.0014105168133604152, 0.0014659449706811007, 0.0015796005867087894, 0.0018045451982180115, 0.001409721439043645]), 
(-0.0045257224984106255, (-0.03224097079526502, 0.02319648041714167), [0.0009683299156983368, 0.0011931140276120675, 0.0015368852459016393, 0.001081511839708561, 0.0011404459143525118, 0.0015967153284671533, 0.0017078446999886144, 0.0016505406943653955, 0.0014248261712071126, 0.001081511839708561]), 
(0.020078509089563105, (-0.007645038770160029, 0.04777121436445999), [0.0017576751816264355, 0.0014045765786855505, 0.0020495403173859577, 0.001930276087973795, 0.0011715089034676663, 0.0016972960318389324, 0.0014615609470914938, 0.0016404007264631789, 0.0014635288607891348, 0.0015814443858724301]), 
(-0.005954077210413298, (-0.03366781350094018, 0.02176880849599985), [0.00162729364233208, 0.001851851851851852, 0.0008419398293668612, 0.0010670560485229698, 0.0008968107168880668, 0.001120699316373417, 0.0011785834549332137, 0.000672834314550042, 0.0012897437335277295, 0.0015162576514853709]), 
(0.0012997176296618684, (-0.026420527150455172, 0.029017965113153864), [0.0014097744360902255, 0.001763150161622098, 0.001410105757931845, 0.0009982384028185555, 0.0008822491471591578, 0.0011755025273304338, 0.0012940415269690018, 0.0017063842306560752, 0.0008814196732871077, 0.0012342776536969555]), 
(-0.00014476668603143224, (-0.027863947793823656, 0.02757463688738628), [0.0015325670498084292, 0.0011779256728900406, 0.001883460859329017, 0.0016516250811065888, 0.0021800612773980673, 0.0022376634083146863, 0.0020650185851672667, 0.0024784609937448365, 0.0015921688878405473, 0.001475448536355052])]


cor_coef = [a for a, b, c in Data]
overlap_dist = [c for a, b, c in Data]
plt.xlabel('Correlation coeficient')
plt.ylabel('overlap distribution')
plt.violinplot(dataset = overlap_dist, positions = cor_coef, showmeans = True)
plt.show()